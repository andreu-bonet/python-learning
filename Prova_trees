def depth(tree):
    if tree == None:
        return 0
    
    left_depth = depth(tree["left_child"])
    
    right_depth = depth(tree['right_child'])

    if left_depth > right_depth:
        return left_depth + 1
    else:
        return right_depth + 1

"/////////////////////////"

def depth(tree):
    if tree == None:
        return 0
    
        if tree == None:
        return 0
    
        if tree == None:
        return 0
    
        if tree == None:
        return 0
    
        if tree == None:
        return 0
    
    left_depth = 0
    
    right_depth = depth(tree['right_child'])

    if left_depth > right_depth:
        return left_depth + 1
    else:
        return right_depth + 1

    if left_depth > right_depth:
        return left_depth + 1
    else:
        return right_depth + 1
    
    right_depth = depth(tree['right_child'])

    if left_depth > right_depth:
        return left_depth + 1
    else:
        return right_depth + 1
    
    right_depth = depth(tree['right_child'])

    if left_depth > right_depth:
        return left_depth + 1
    else:
        return right_depth + 1
    
    right_depth = depth(tree['right_child'])

    if left_depth > right_depth:
        return left_depth + 1
    else:
        return right_depth + 1

















def build_bst(my_list):
  if len(my_list) == 0:
    return None

  mid_idx = len(my_list) // 2
  mid_val = my_list[mid_idx]

  tree_node = {"data": mid_val}
  tree_node["left_child"] = build_bst(my_list[ : mid_idx])
  tree_node["right_child"] = build_bst(my_list[mid_idx + 1 : ])

  return tree_node

# HELPER VARIABLES
tree_level_1 = build_bst([1])
tree_level_2 = build_bst([1, 2, 3])
tree_level_4 = build_bst([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) 

# test cases
print(depth(tree_level_1))
print(depth(tree_level_2))
print(depth(tree_level_4))

print(2//2)

import LinkedList

def remove_node(head, i):
    if i < 0:
        return head
    if head is None:
        return None
    if i == 0:
        return head.next_node

    head.next_node = remove_node(head.next_node, i - 1)
    return head







import LinkedList

def remove_node(head, 3):
    if i < 0:
        return head
    if head is None:
        return None
    if i == 0:
        return head.next_node

        if i < 0:
        return head
    if head is None:
        return None
    if i == 0:
        return head.next_node

        if i < 0:
        return head
    if head is None:
        return None
    if i == 0:
        return head.next_node

        if i < 0:
        return head
    if head is None:
        return None
    if i == 0:
        return head.next_node

    return head
    return head
    return head
    return head


test = "Garjesus"
print(text[1])